
package com.example.services;

import com.example.exceptions.AccountNotFoundException;
import com.example.model.Account;
import com.example.repositories.AccountRepository;
import java.math.BigDecimal;
import java.util.List;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class TransferService {
    private final AccountRepository accountRepository;

    public TransferService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    @Transactional
    public void transferMoney(long idSender, long idReceiver, BigDecimal amount) {
        Account sender = (Account)this.accountRepository.findById(idSender).orElseThrow(() -> {
            return new AccountNotFoundException();
        });
        Account receiver = (Account)this.accountRepository.findById(idReceiver).orElseThrow(() -> {
            return new AccountNotFoundException();
        });
        BigDecimal senderNewAmount = sender.getAmount().subtract(amount);
        BigDecimal receiverNewAmount = receiver.getAmount().add(amount);
        this.accountRepository.changeAmount(idSender, senderNewAmount);
        this.accountRepository.changeAmount(idReceiver, receiverNewAmount);
    }

    public Iterable<Account> getAllAccounts() {
        return this.accountRepository.findAll();
    }

    public List<Account> findAccountsByName(String name) {
        return this.accountRepository.findAccountsByName(name);
    }
}
